<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[要过怎样的生活]]></title>
      <url>%2F2017%2F04%2F03%2F2017-04-03-%E8%A6%81%E8%BF%87%E6%80%8E%E6%A0%B7%E7%9A%84%E7%94%9F%E6%B4%BB%2F</url>
      <content type="text"><![CDATA[要过怎样的生活 最近身边的人也都陆续开始买房，看了两周，大致就是买得起的看不上，看得上的买不起的状态。又随便看了看车，还是一样的状态。 一直以来都有一种心态，觉得自己就是应该拥有最好的东西，也希望自己都能值得拥有最好的东西，从衣食住行上，房车也一样；看完之后落差其实蛮大的，按照这个状态下去，可能一辈子就只能住在100平左右的房子里，开着20w左右的车，和老家的同学比起来好像都很不错了，一种饿不死的状态；心理多少会有很多不甘心，觉得自己就应该住几百平的大房子，开好车，这一刻只想记下来，要让自己的才华值得拥有这一切。 未来待续。 2017.4.302:36]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[读元认知]]></title>
      <url>%2F2017%2F04%2F03%2F2017-04-03-%E5%85%83%E8%AE%A4%E7%9F%A5%2F</url>
      <content type="text"><![CDATA[看李笑来公账号推荐的这本书，买了本看了看。 2017.4.302:12]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[区块链（一）从点对点数据传输说起]]></title>
      <url>%2F2017%2F04%2F03%2F2017-04-03-%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%8E%E7%82%B9%E5%AF%B9%E7%82%B9%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E8%AF%B4%E8%B5%B7%2F</url>
      <content type="text"><![CDATA[从点对点数据传输说起 如今我们方便的通过微信沟通，通过淘宝购物都得益于网络的数据传输 tcp/ip协议，在tcp/ip出现之前，每台计算机都是信息的孤岛，无法进行任何的信息交换。tcp/ip出现之后可以理解为创造了一种计算机之间信息交换的语言，不同的计算机能通过这种语言交换信息，就像人类语言一样，至此开创了一个新的时代。区块链跟tcp/ip很类似，区块链伴随着比特币产生，是比特币底层的技术，中本聪09年提出比特币意在解决点对点的货币传输问题，货币的传输延伸一点可以理解为价值的传输，信用的传输例如期货的传输，保险，资产证明等价值数据的传输，跟普通数据传输相比要求更可靠更安全更不可篡改的的网络协议。 我们可以做一个假设，如果只是单纯的用tcp/ip网络协议来传输货币，例如A向B转100块钱，同时A向C转100块钱，tcp/ip协议不会区分该100块钱是否已经转给B，这就是传统数据传输协议无法解决的核心问题：重复支付的问题；同时我们知道货币交换的本质是物物交换，交换双方在点对点的协议下如何确保对方的信任关系，如何确保协议的信任关系（如果协议本身就被篡改）在非第三方的参与下也是当前数据传输协议无法解决的问题。面对以上问题当前的解决方案都是通过第三方参与来解决，例如传统银行，第三方支付公司支付宝等，通过第三方的参与来控制重复支付的问题，第三方的担保来解决双方信任问题，传输安全问题。前面提到区块链也是意在解决点对点的货币价值传输问题，因此解决的核心问题也就是当前第三方银行，支付公司解决的问题：重复支付，双方信任关系问题。从传输协议上解决，从而去掉第三方机构的参与，去中心化的协议也因此而来。以上我们能给区块链下一个简单的定义：一种点对点的价值传输协议，同时具有去中介，信任，不可篡改的特性。 2017.4.4]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[读牧羊少年奇幻之旅]]></title>
      <url>%2F2017%2F03%2F19%2F2017-03-19-%E7%89%A7%E7%BE%8A%E5%B0%91%E5%B9%B4%E5%A5%87%E5%B9%BB%E4%B9%8B%E6%97%85%2F</url>
      <content type="text"><![CDATA[今年春节又把牧羊少年读了一遍，第一遍泛泛而看，第二遍看的时候正处于比较迷茫的时候，多了一些新的感同身受。 跳出舒适圈 圣地亚哥作为一个牧羊少年，在放羊领域轻车熟路，熟悉每一只羊的习性，似乎能与羊对话；清楚的知道自己所在区域的草地分布，在现代可以认为是是放羊领域的专家；然而命运一手安排的故事往往都驳人所愿，圣地亚哥厌倦了每天鼓噪无味的放羊生活，他放羊的时候会看书，在内心深处充满了对外面世界的向往，他羡慕那些云游四方的人，在他所处的环境中，想要跳出这个圈子会被人认为是傻逼，再说除了放羊他几乎想不到自己还能做啥。就在这样的背景下，在撒冷之王的鼓励下，圣地亚哥卖掉了所有羊，开始了寻宝之路，靠的是一种破釜沉舟的勇气。跳出自己的舒适圈其实是间很痛苦的事，就像行驶的汽车，靠惯性行驶是件很简单的事，如果想让它改变方向则必须克服原有的惯性作用，同时给予方向上的动力。刚开始肯定是痛苦的，慢慢养成新的习惯之后也就习以为常。小到一个习惯的养成，比如健身，写作；大到工作领域，人生方向，我们总需要不断的跳出跳入，倾听自己内心的呼声。转眼工作快三年，庆幸程序猿的工作每天都会有一丝新鲜感，相比于刚工作时的那份激情已淡去许多，所以持续保持对这个世界的新鲜感，不断冲出自己的舒适圈，才不至于被工作生活强奸。最近看到的很喜欢的一句话，只有强大到自己满意，生活才会给你一个满意的反馈，加油。 专注坚持 圣地亚哥卖掉羊之后，转过头钱全被骗，那该是一种这样的绝望，绝路上帮别人买水晶，一卖卖了几年，卖得风生水起；回头继续坚持心中宝藏，在沙漠中又经历了战争，甚至濒临死亡，一直到在金字塔下找到宝藏；回过头说其实不管在哪个地方，哪个领域只要一直持续的坚持做，都能做出成绩的，跟一万小时的定律似乎有点不谋而合。这个时代朋友圈好像每天都充斥着鸡汤，鸭汤，去年开始流行知识变现，好像听几节课就能用好时间年入百万，就能学好英语，就能练出几块腹肌，要是真这样，所有人都成为这样的人；有想法很简单，能一直做很难，包括我自己，我最近一直也在想要是真改不了，可能永远都成不了大器，碌碌无为，有时候能自己反思写写也挺好，时刻督促。 宇宙的语言 文中大量在再讲宇宙的语言，炼金术士点石成金之术，我理解的点石成金之术就是宇宙的语言也是文中所谓世界之魂，这个宇宙只会帮助那些一心一意想做成事的人，然而这个宇宙也不会轻易让你做成，只有真正跟世界之魂保持一致的人才会得到这个帮助。 2017.4.302:12]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[给自己的小目标-2017]]></title>
      <url>%2F2017%2F02%2F11%2F2016-01-08-%E5%AE%9A%E4%B8%AA%E5%B0%8F%E7%9B%AE%E6%A0%87-2017%2F</url>
      <content type="text"><![CDATA[给自己的小目标-2017 2017关键字：自律、自信、专注 上次成都团队面试后，山丘给了些建议；最近也在想工作两年多了，除了多做了几个业务，自己瞎折腾了很多，没有任何一方面有稍微深入的了解，没有体系化的思维，今年一定要慢慢改变。 小目标： 持续深入区块链技术，产出5篇有质量的文章 10本书，每本书一篇读后感： 元认知 只有偏执狂才能生存 自私的皮球 对金融危机的反思 区块链-从数字货币到信用社会 牛奶可乐经济学 怪诞行为学 国富论 巨婴国 集装箱改变世界 在线 皮克斯的启示 那些古怪又让人忧伤的问题 美国种族简史 逃不开的经济周期 时运变迁 菊与刀 人类简史 未来简史 三体第三部 追风筝的人 10部经典高分电影]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[写给自己的2016]]></title>
      <url>%2F2016%2F12%2F25%2F2016-12-25-%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842016%2F</url>
      <content type="text"><![CDATA[写给自己的本命年 回头一想，2015年好像才刚刚结束，一转身16年只剩下几天；岁月如梭，工作之后每年回一次家才发现一年真的是转瞬即逝，去年过年回家就好像发生在昨天一样；本命年在传言里面总觉得会发生点不顺的事情，也算吧，有好有坏交织的一年，幸福喜悦，悲伤难过总会过去，留下的是一个更好的自己。 从工作说起吧，一年大概有三分之二的时间都在工作上，也可能是大部分时间都专注到了工作上时间也自然变得没太关注；工作的第二年，比起第一年仿佛少了几分陌生感，又或者是慢慢接受这个不在自由的世界，人总是会被周围的环境所同化，然而这也是最可怕的，就像思维上套上枷锁一样。这一年也顺利晋升了，算是对15年的肯定吧，讲真一直也是个工作比较踏实的孩子，有没做好的事情心理总是很不踏实；这一年也算是给了GN，从去年12月份到项目组到今年12月刚好满一年，这一年也是自己不断突破的一年，写了系统的核心代码，算是半个系统owner的角色吧，突然的组织结构调整，说实话很舍不得，自己写的第一个上线系统，很想把它做得更好。这一年遇到了教授、吴老板、大师很重要的几个人，说不上给了啥，但在平时的工作沟通中总有一些言传身教的味道，在思维方式，职业发展上带来了一些新的启发，感恩；下周就要去新的组，舍不得这一年来并肩作战的兄弟们，特别是一期项目几乎每天都是加班到很晚，彼此之间也有浓浓的革命友谊；这一年也如愿的做了开发，也算让自己相信所有的学习都是有用的，欠的只是一个时机；刚可以转开发又遇到一大波组织调整，不得不说这是个天意，既然无力反抗也只能选择默默接受，努力在新的环境中找到闪光的地方。 聊聊学习，从工作第一年开始慢慢才发现越牛逼越闪闪发光的人总是在不断自我学习，而且不仅工作，各个方面都很牛逼；于是从第一年开始下班之后就开始疯狂看书，看了很多技术书，但太久没用又慢慢忘了；自己也在不断思考一直看技术的书真的有用吗，也受今年姚博士的一个演讲，未来一定是交叉学科的世界，即使技术学得再多没有可用的场景依然是没用的；因此16年开始慢慢开始学习金融，学习fintech，学习区块链，看了好多金融的书，看得越多才发现知道的越来越少，良性循环；回过头来看，学习的过程也有很多问题，看了很多发现真正能掌握的也挺少，看书的效率很低，17年我希望不仅仅是看了多少书，而更重要的是能有几本书的收获而不是走马观花，今年要更注重效率；思维开阔之后才能有越来越多新的想法，16年整体是一个好的开始，17年继续加油！ 聊聊生活，庆幸的是从大学开始坚持游泳到现在，坚持几年下来明显身体比之前好了很多，基本上没感冒过；16年开始坚持每周健身，加强力量，第一年坐久之后总有腰酸背痛的感觉，从健身开始后完全没出现过，欣慰。工作的第二年，谈不上有生活，上班时间基本上11点左右下班，回家之后可能还要加加班，早上起床脸都没认真洗过就冲出去坐公交，工作日就这么一年过去，想想真觉得挺悲哀的，自己的时间完全被别人控制，所以终极人生信条就是让更多的时间属于自己；周末还是习惯了一个人吃饭，一个人游泳，健身，跟第一年比起来渐渐习惯取悦自己，想起一句话，一个人在外也都挺好的，只是突然的孤独感可能把人逼死；很对，只有家的地方才有温暖。一直鼓励自己的话，总有一段艰难的岁月要一个人挺过去，最艰难的这几年，熬过去，未来一定很酷。今年第一次出了国，去了马来西亚，潜了水，看了水下不一样的世界，外面的世界一定要多去看看。今年国庆去看了房，用钱的时候才发现是有多缺钱，之前在知乎上看到一句话很有感触，不是说有多渴望钱，只是有钱后能把父母当小孩宠，17年拼命赚钱吧。 聊聊身边的人，家人，爷爷今年走了，走的那个凌晨就好像星球坠落一样猛得惊醒，没看到爷爷最后一面，很遗憾；去年过年爷爷坐在门口的情景仿佛都还在眼前，好好珍惜眼前人吧；换了新的室友，ls，xy，范总也离职了，到了上城区，到现在还没联系过，春节走之前打算一起吃个饭，能聚在一起就是缘分，祝一切都好，珍惜；一直照顾我的大师，感恩，希望身边的人一切都好，来来去去的人，来日相见希望大家都还是原来的样子；16年别人介绍了很多妹纸，每个基本上都是聊一两次就不想聊，每天真的完全没时间去撩妹，周末又不想动，17年要慢慢改变才行，妹纸这个事情父母其实是最关心的，有妹纸他们也好了却一件大事。 写到最后发现其实16年还是发生了很多事，这周比特币又刚好亏了2w多，一天蒸发17w+的感觉真的很难受，老家首付都够了，就像那句话命中有时终须有，很多事情经历过之后会突然间懂得很多道理，仿佛是一下子又长大了不少，一年年就这样过去了，最担心的其实是父母一天天的老了，作为儿子的却还没有完全让他们不操心，要尽快变得牛逼起来，17年努力，奋斗，💪。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[swift 语法基础与 java 对比]]></title>
      <url>%2F2016%2F05%2F22%2F2016-05-22-swift%E5%9F%BA%E7%A1%80%2F</url>
      <content type="text"><![CDATA[swift 语法基础（与java对比） 最近开始瞎折腾 swift，对比下swift跟java的语法基础 基础数据类型java 的基础数据类型： int，String，Double，float swift 的基础数据类型 ：var 定义变量，通过初始化赋值类型来识别var的类型，例： var number = 5 编译器将 number 判断为 Integer 格式，一旦类型确定则不能改变 let 定义为常量，跟java 的final关键字类似 流程控制java if if(a&gt;b){ xxxx ; }else if(a&gt;c){ xxx ; } swift if if a&gt;b { xxx }else if a&gt;c { xxx } swift if 的条件语句不用加括号，语句不用加分号结束，switch case 也类似，switch中的条件语句不用加括号。java for for(int i=0;i&lt;4;i++){ } swift for // 不包含4 for i in 0...&lt;4 { } or // 包含4 for i in 0...4 { } 方法定义java 方法定义 public ( protected private ) String say (String words , String user){ return user + &quot;say&quot;+ words; } say(&quot;hello world&quot;, &quot;xiaoming&quot; ); swift 方法定义 func say ( words : String，user ： String ) -&gt; String { return “\(name) say \(words)” } say(&quot;hello world&quot;, user: &quot;xiaoming&quot;) swift 方法定义格式跟 java 有区别，函数参数，返回值格式都不一样，方法调用过程中也需要函数的形参名（第一个形参名可以省略）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[我理解的面向对象]]></title>
      <url>%2F2016%2F04%2F26%2F2016-04-26-%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F</url>
      <content type="text"><![CDATA[我理解的面向对象 最近在看think in uml，一本关于软件建模的书，看了第一节对面向对象的介绍，看完后写写自己对它的理解。 在软件设计过程中我们常常会听到面向对象和面向过程的设计方法；什么是对象？什么是过程？如果不从软件设计的角度看，从整个哲学的世界观来看，世界上万物可以理解都是一个个对象存在，从宇宙，星球，物种个体到个体细胞，原子，分子，质子；过程则更抽象了，整个宇宙大爆炸是宇宙变化的过程，达尔文进化论是物种进化的过程，水分解是化学反应过程；我们不难看出，对象更多的是在描述一种实实在在存在的东西，而过程更多的是在描述一个变化的过程，一种场景的抽象。 回到软件设计中来看对象和过程，一个简单的例子：用户在网站上购物，一个传统的电子商务系统，用户登录，登录之后挑选商品，挑选完之后支付，支付完成之后发货；根据面向过程的定义它会反应具体的场景，整个系统设计也会以购物的场景为核心驱动整个系统设计，因此系统设计跟用户购物的流程强耦合在一起，跟常说的烟囱式的系统架构很像；这种设计思路耦合度很高，如果有一天支付方式有变动，发货方式有变动，需要兼容其他的会员类型等等需求后，面向过程的设计思路则需要覆盖到每一个新的场景，而每一个新的场景对之前的流程可能都会有颠覆性的冲击；简单的做法在之前的系统中做大量的if else 的分支情况，随着业务越来越复杂，最终系统将没法维护；而面向对象关注的是一个个实体，因此将整个业务场景抽象化，整个过程包括用户，商品，支付，配送等大的几类抽象的东西，是因为购物这件事将几个实体关联在一起，如果有一天出现了转账的场景，那又将用户跟支付这两个实体关联，因此在面向对象的设计方式中关注的是独立的实体，在系统中就是独立的对象，具体的业务场景只是对象的不同的组合方式，从大的系统架构来看，每一个个实体可以理解为软件架构中的每一个个小模块或者子系统，每个模块之间的联系通过服务的方式联系起来，慢慢的就演变成了soa的软件架构，这种设计方式，由于各个模块耦合度很低，在应变多变的需求上处理得心应手。从整个优缺点来看，面向过程的设计方式也将逐渐被淘汰，而面向对象的设计方式又演变出了像soa的服务架构，ddd的业务建模方法等多种的应用方式。 我们一直在说面向对象的设计方法，那面向对象的方法跟面向对象的语言有什么联系？在上面的讨论中已经大致知道面向对象的方法更关注的是每一个实体，而每一个实体具体到语言上可以理解为就是每一个对象，每一个实体做的具体操作就是对象的具体方法，对用到具体实体的外围来看，实体是对每一个操作做了具体的封装，外围不用感知实体是具体怎么做的；不同的实体组成一个新的实体，比如多个零件够成一个机械，机械输出具体的能力，对应语言上就是聚合，对象的聚合；不同的实体间可能又会有相同的共性，比如都会有姓名，年龄；那相同的这部分将它抽象，具体不同的部分在从抽象实体上产生新的实体，就是语言上抽象类，继承，超类，子类的概念，简单来看我理解的面向对象的语言是为了更好的做面向对象的设计而产生的。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[写给爷爷]]></title>
      <url>%2F2016%2F04%2F03%2F2016-5-24-%E5%86%99%E7%BB%99grandfather%2F</url>
      <content type="text"></content>
    </entry>

    
  
  
</search>
